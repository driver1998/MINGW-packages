diff --git a/libspeexdsp/resample_neon.h b/libspeexdsp/resample_neon.h
index e14ffe1..478fd5a 100644
--- a/libspeexdsp/resample_neon.h
+++ b/libspeexdsp/resample_neon.h
@@ -38,8 +38,8 @@
 
 #ifdef FIXED_POINT
 #if defined(__aarch64__)
-static inline int32_t saturate_32bit_to_16bit(int32_t a) {
-    int32_t ret;
+static inline spx_int32_t saturate_32bit_to_16bit(spx_int32_t a) {
+    spx_int32_t ret;
     asm ("fmov s0, %w[a]\n"
          "sqxtn h0, s0\n"
          "sxtl v0.4s, v0.4h\n"
@@ -50,8 +50,8 @@ static inline int32_t saturate_32bit_to_16bit(int32_t a) {
     return ret;
 }
 #elif defined(__thumb2__)
-static inline int32_t saturate_32bit_to_16bit(int32_t a) {
-    int32_t ret;
+static inline spx_int32_t saturate_32bit_to_16bit(spx_int32_t a) {
+    spx_int32_t ret;
     asm ("ssat %[ret], #16, %[a]"
          : [ret] "=r" (ret)
          : [a] "r" (a)
@@ -59,8 +59,8 @@ static inline int32_t saturate_32bit_to_16bit(int32_t a) {
     return ret;
 }
 #else
-static inline int32_t saturate_32bit_to_16bit(int32_t a) {
-    int32_t ret;
+static inline spx_int32_t saturate_32bit_to_16bit(spx_int32_t a) {
+    spx_int32_t ret;
     asm ("vmov.s32 d0[0], %[a]\n"
          "vqmovn.s32 d0, q0\n"
          "vmov.s16 %[ret], d0[0]\n"
@@ -76,10 +76,10 @@ static inline int32_t saturate_32bit_to_16bit(int32_t a) {
 #define OVERRIDE_INNER_PRODUCT_SINGLE
 /* Only works when len % 4 == 0 and len >= 4 */
 #if defined(__aarch64__)
-static inline int32_t inner_product_single(const int16_t *a, const int16_t *b, unsigned int len)
+static inline spx_int32_t inner_product_single(const int16_t *a, const int16_t *b, unsigned int len)
 {
-    int32_t ret;
-    uint32_t remainder = len % 16;
+    spx_int32_t ret;
+    spx_uint32_t remainder = len % 16;
     len = len - remainder;
 
     asm volatile ("	 cmp %w[len], #0\n"
@@ -131,10 +131,10 @@ static inline int32_t inner_product_single(const int16_t *a, const int16_t *b, u
     return ret;
 }
 #else
-static inline int32_t inner_product_single(const int16_t *a, const int16_t *b, unsigned int len)
+static inline spx_int32_t inner_product_single(const int16_t *a, const int16_t *b, unsigned int len)
 {
-    int32_t ret;
-    uint32_t remainder = len % 16;
+    spx_int32_t ret;
+    spx_uint32_t remainder = len % 16;
     len = len - remainder;
 
     asm volatile ("	 cmp %[len], #0\n"
@@ -190,8 +190,8 @@ static inline int32_t inner_product_single(const int16_t *a, const int16_t *b, u
 
 #elif defined(FLOATING_POINT)
 #if defined(__aarch64__)
-static inline int32_t saturate_float_to_16bit(float a) {
-    int32_t ret;
+static inline spx_int32_t saturate_float_to_16bit(float a) {
+    spx_int32_t ret;
     asm ("fcvtas s1, %s[a]\n"
          "sqxtn h1, s1\n"
          "sxtl v1.4s, v1.4h\n"
@@ -202,8 +202,8 @@ static inline int32_t saturate_float_to_16bit(float a) {
     return ret;
 }
 #else
-static inline int32_t saturate_float_to_16bit(float a) {
-    int32_t ret;
+static inline spx_int32_t saturate_float_to_16bit(float a) {
+    spx_int32_t ret;
     asm ("vmov.f32 d0[0], %[a]\n"
          "vcvt.s32.f32 d0, d0, #15\n"
          "vqrshrn.s32 d0, q0, #15\n"
@@ -224,7 +224,7 @@ static inline int32_t saturate_float_to_16bit(float a) {
 static inline float inner_product_single(const float *a, const float *b, unsigned int len)
 {
     float ret;
-    uint32_t remainder = len % 16;
+    spx_uint32_t remainder = len % 16;
     len = len - remainder;
 
     asm volatile ("	 cmp %w[len], #0\n"
@@ -279,7 +279,7 @@ static inline float inner_product_single(const float *a, const float *b, unsigne
 static inline float inner_product_single(const float *a, const float *b, unsigned int len)
 {
     float ret;
-    uint32_t remainder = len % 16;
+    spx_uint32_t remainder = len % 16;
     len = len - remainder;
 
     asm volatile ("	 cmp %[len], #0\n"
